var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) =>
  function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])((fn = 0))), res;
  };
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === "object") || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, "default", { value: mod, enumerable: true })
      : target,
    mod
  )
);
var __toCommonJS = (mod) =>
  __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/isomorphic-secp256k1-js/hmac_sha256.js
async function hmac_sha256(data, key) {
  if (!(data instanceof Uint8Array) || !(key instanceof Uint8Array)) {
    throw new TypeError("Expected Uint8Array input data.");
  }
  if (typeof window === "undefined") {
    let crypto2;
    try {
      crypto2 = require("crypto");
    } catch (_err) {
      crypto2 = await import("crypto");
    }
    return Uint8Array.from([
      ...crypto2.createHmac("SHA256", key).update(data).digest(),
    ]);
  } else {
    const importedKey = await window.crypto.subtle.importKey(
      "raw",
      key,
      { name: "HMAC", hash: { name: "SHA-256" } },
      false,
      ["sign", "verify"]
    );
    const signature = await window.crypto.subtle.sign(
      "HMAC",
      importedKey,
      data
    );
    return new Uint8Array(signature);
  }
}
var hmac_sha256_default;
var init_hmac_sha256 = __esm({
  "node_modules/isomorphic-secp256k1-js/hmac_sha256.js"() {
    hmac_sha256_default = hmac_sha256;
  },
});

// node_modules/isomorphic-secp256k1-js/utils.js
function number_to_array(number) {
  let hn = number.toString(16);
  hn = hn.length % 2 ? hn.padStart(hn.length + 1, "0") : hn;
  return Uint8Array.from(
    hn.match(/[a-f0-9A-F]{2}/gmu).map((i) => Number(`0x${i}`))
  );
}
function array_to_number(array) {
  return BigInt(
    `0x${array.reduce(
      (acc, i) => (acc += i.toString(16).padStart(2, "0")),
      ""
    )}`
  );
}
function get_mod(val, mod) {
  return ((val % mod) + mod) % mod;
}
function mul_inverse(val, mod) {
  let dst, t, q;
  let b = mod;
  let a = get_mod(val, mod);
  const b0 = mod;
  let x0 = 0n;
  let x1 = 1n;
  if (mod == 1n) dst = 1n;
  else
    while (a > 1n) {
      q = a / b;
      t = b;
      dst = a % b;
      b = dst;
      a = t;
      t = x0;
      q = x0 * q;
      x0 = x1 - q;
      x1 = t;
    }
  if (x1 < 0n) x1 = x1 + b0;
  dst = x1;
  return dst;
}
function calc_new_point(Q, P, 位, mod) {
  const x = get_mod(get_mod(位 * 位, mod) - P.x - Q.x, mod);
  const y = get_mod(get_mod((P.x - x) * 位, mod) - P.y, mod);
  return { x, y };
}
function add(Q, P, mod) {
  const x = mul_inverse(P.x - Q.x, mod);
  const y = get_mod(get_mod(P.y - Q.y, mod) * x, mod);
  return calc_new_point(Q, P, y, mod);
}
function dbl(G, mod) {
  const numerator = get_mod(get_mod(G.x * G.x, mod) * 3n, mod);
  const denominator = get_mod(mul_inverse(2n * G.y, mod) * numerator, mod);
  return calc_new_point(G, G, denominator, mod);
}
function double_and_add(G, k, mod, n) {
  k = get_mod(k, n);
  if (k == 1n) return G;
  else if (k % 2n) return add(double_and_add(G, k - 1n, mod, n), G, mod);
  else return double_and_add(dbl(G, mod), k / 2n, mod, n);
}
function point_from_x(odd, x) {
  const { mod, b, a } = secp256k1;
  odd = BigInt(odd);
  const alpha = get_mod(
    get_mod(get_mod(BigInt(x) ** 3n, mod) + get_mod(a * x, mod), mod) + b,
    mod
  );
  let y = powmod(alpha, mod / 4n + 1n, mod);
  if (!(y % 2n) ^ !odd) y = mod - y;
  return { x, y };
}
async function get_signature(T, e, d, buffers, racid = 0) {
  const { x, y, mod, n } = secp256k1;
  const G = { x, y };
  let r, s;
  async function update_T({ buf_h2b, buf_F }) {
    const buf_pad_v = Uint8Array.from([...buf_h2b, 0]);
    const buf_k = await hmac_sha256_default(buf_pad_v, buf_F);
    const bufv = await hmac_sha256_default(buf_h2b, buf_k);
    const bufv2 = await hmac_sha256_default(bufv, buf_k);
    return array_to_number(bufv2);
  }
  const x1 = T - n;
  if (x1 >= 0n || 0n >= T)
    return get_signature(await update_T(buffers), e, d, buffers);
  let val = T;
  const Q = double_and_add(G, val, mod, n);
  if (Q.x == 0n && Q.y == 0n)
    return get_signature(await update_T(buffers), e, d, buffers);
  let v = 0n;
  if (Q.x > n) v = 2n;
  r = number_to_array(Q.x);
  val = get_mod(mul_inverse(T, n) * (Q.x * d + e), n);
  if (Q.y % 2n) racid = 1n | v;
  else racid = 0n | v;
  if (buffers.canonical && val > n / 2n) {
    val = n - val;
    racid = racid ^ 1n;
  }
  s = number_to_array(val);
  return { r, s, racid };
}
var secp256k1, powmod;
var init_utils = __esm({
  "node_modules/isomorphic-secp256k1-js/utils.js"() {
    init_hmac_sha256();
    secp256k1 = Object.freeze({
      x: 0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798n,
      y: 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8n,
      mod: 115792089237316195423570985008687907853269984665640564039457584007908834671663n,
      n: 115792089237316195423570985008687907852837564279074904382605163141518161494337n,
      a: 0x0000000000000000000000000000000000000000000000000000000000000000n,
      b: 0x0000000000000000000000000000000000000000000000000000000000000007n,
      h: 1n,
    });
    powmod = (number, exponent, m) => {
      let r = 1n;
      let b = number % m;
      let e = exponent;
      if (b == 0n) return 0n;
      while (e > 0n) {
        if (e % 2n) r = (r * b) % m;
        e = e >> 1n;
        b = b ** 2n % m;
      }
      return r;
    };
  },
});

// node_modules/isomorphic-secp256k1-js/get_public_key.js
var get_public_key_exports = {};
__export(get_public_key_exports, {
  default: () => get_public_key_default,
});
async function get_public_key(private_key) {
  const { x, y, n, mod } = secp256k1;
  const k = array_to_number(private_key);
  if (n < k) {
    throw new RangeError("Invalid private key size");
  }
  const R = double_and_add({ x, y }, k, mod, n);
  return Uint8Array.from([R.y % 2n ? 3 : 2, ...number_to_array(R.x)]);
}
var get_public_key_default;
var init_get_public_key = __esm({
  "node_modules/isomorphic-secp256k1-js/get_public_key.js"() {
    init_utils();
    init_utils();
    get_public_key_default = get_public_key;
  },
});

// node_modules/antelope-ecc/index.js
var index_exports = {};
__export(index_exports, {
  legacy_from_private_key: () => legacy_from_private_key,
  legacy_from_public_key: () => legacy_from_public_key,
  legacy_to_private_key: () => legacy_to_private_key,
  legacy_to_public_key: () => legacy_to_public_key,
  mnemonic_create: () => createMnemonic,
  mnemonic_recover: () => recoverMnemonic,
  new_keys: () => new_keys,
  private_key_from_wif: () => private_key_from_wif,
  private_key_to_wif: () => private_key_to_wif,
  public_key_from_private_wif: () => public_key_from_private_key,
  public_key_from_wif: () => public_key_from_wif,
  public_key_to_wif: () => public_key_to_wif,
  recover_public_key: () => recover_public_key2,
  sign2: () => sign2,
  sign_packed_txn: () => sign_packed_txn,
  validate_private_key: () => validate_private_key,
  validate_public_key: () => validate_public_key,
});
module.exports = __toCommonJS(index_exports);

// node_modules/base58-js/base58_chars.js
var base58_chars = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var base58_chars_default = base58_chars;

// node_modules/base58-js/create_base58_map.js
var create_base58_map = () => {
  const base58M = Array(256).fill(-1);
  for (let i = 0; i < base58_chars_default.length; ++i)
    base58M[base58_chars_default.charCodeAt(i)] = i;
  return base58M;
};
var create_base58_map_default = create_base58_map;

// node_modules/base58-js/binary_to_base58.js
var base58Map = create_base58_map_default();
function binary_to_base58(uint8array) {
  const result = [];
  for (const byte of uint8array) {
    let carry = byte;
    for (let j = 0; j < result.length; ++j) {
      const x = (base58Map[result[j]] << 8) + carry;
      result[j] = base58_chars_default.charCodeAt(x % 58);
      carry = (x / 58) | 0;
    }
    while (carry) {
      result.push(base58_chars_default.charCodeAt(carry % 58));
      carry = (carry / 58) | 0;
    }
  }
  for (const byte of uint8array)
    if (byte) break;
    else result.push("1".charCodeAt(0));
  result.reverse();
  return String.fromCharCode(...result);
}
var binary_to_base58_default = binary_to_base58;

// node_modules/isomorphic-secp256k1-js/sha256.js
async function sha256(data) {
  if (!(data instanceof Uint8Array)) {
    throw new TypeError("Expected Uint8Array input data.");
  }
  if (typeof window === "undefined") {
    let crypto2;
    try {
      crypto2 = require("crypto");
    } catch (_err) {
      crypto2 = await import("crypto");
    }
    return new Uint8Array(crypto2.createHash("sha256").update(data).digest());
  } else {
    const digest = await crypto.subtle.digest("SHA-256", data);
    return new Uint8Array(digest);
  }
}

// node_modules/antelope-ecc/keys/legacy_from_private_key.js
async function legacy_from_private_key(private_key) {
  private_key = new Uint8Array([128, ...private_key]);
  const checksum = await sha256(await sha256(private_key));
  const array = [...private_key, ...checksum.slice(0, 4)];
  return binary_to_base58_default(new Uint8Array(array));
}

// node_modules/ripemd160-js/ripemd160.js
var WASM = [
  0, 97, 115, 109, 1, 0, 0, 0, 1, 15, 3, 96, 1, 127, 0, 96, 1, 127, 1, 127, 96,
  2, 127, 127, 0, 3, 6, 5, 1, 0, 2, 1, 0, 5, 3, 1, 0, 2, 6, 8, 1, 127, 1, 65,
  176, 137, 4, 11, 7, 29, 3, 6, 109, 101, 109, 111, 114, 121, 2, 0, 7, 103, 101,
  116, 95, 112, 116, 114, 0, 3, 6, 100, 105, 103, 101, 115, 116, 0, 4, 10, 165,
  48, 5, 37, 1, 1, 127, 3, 64, 32, 1, 65, 192, 0, 71, 4, 64, 32, 0, 32, 1, 106,
  65, 0, 58, 0, 0, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 32, 0, 11, 211, 3,
  1, 8, 127, 65, 192, 8, 33, 4, 35, 0, 65, 224, 0, 107, 34, 3, 36, 0, 32, 3, 65,
  208, 0, 106, 65, 144, 8, 40, 2, 0, 54, 2, 0, 32, 3, 65, 136, 8, 41, 3, 0, 55,
  3, 72, 32, 3, 65, 128, 8, 41, 3, 0, 55, 3, 64, 32, 0, 65, 6, 118, 33, 8, 3,
  64, 32, 5, 32, 8, 71, 4, 64, 65, 0, 33, 1, 3, 64, 32, 1, 32, 4, 106, 33, 2,
  32, 1, 65, 192, 0, 71, 4, 64, 32, 1, 32, 3, 106, 34, 6, 32, 2, 45, 0, 0, 34,
  7, 54, 2, 0, 32, 6, 32, 7, 32, 2, 65, 1, 106, 45, 0, 0, 65, 8, 116, 114, 34,
  7, 54, 2, 0, 32, 6, 32, 2, 65, 2, 106, 45, 0, 0, 65, 16, 116, 32, 7, 114, 34,
  7, 54, 2, 0, 32, 6, 32, 2, 65, 3, 106, 45, 0, 0, 65, 24, 116, 32, 7, 114, 54,
  2, 0, 32, 1, 65, 4, 106, 33, 1, 12, 1, 11, 11, 32, 5, 65, 1, 106, 33, 5, 32,
  3, 65, 64, 107, 32, 3, 16, 2, 32, 2, 33, 4, 12, 1, 11, 11, 65, 0, 33, 5, 32,
  3, 16, 0, 33, 2, 32, 0, 65, 63, 113, 33, 3, 65, 0, 33, 1, 3, 64, 32, 1, 32, 3,
  71, 4, 64, 32, 2, 32, 1, 65, 124, 113, 106, 34, 6, 32, 6, 40, 2, 0, 32, 1, 32,
  4, 106, 45, 0, 0, 32, 5, 65, 24, 113, 116, 115, 54, 2, 0, 32, 5, 65, 8, 106,
  33, 5, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 32, 2, 32, 0, 65, 60, 113,
  106, 34, 4, 32, 4, 40, 2, 0, 65, 1, 32, 0, 65, 3, 116, 34, 4, 65, 24, 113, 65,
  7, 114, 116, 115, 54, 2, 0, 32, 3, 65, 56, 79, 4, 64, 32, 2, 65, 64, 107, 32,
  2, 16, 2, 32, 2, 16, 0, 26, 11, 32, 2, 32, 4, 54, 2, 56, 32, 2, 32, 0, 65, 29,
  118, 54, 2, 60, 32, 2, 65, 64, 107, 32, 2, 16, 2, 65, 0, 33, 1, 3, 64, 32, 1,
  65, 20, 71, 4, 64, 32, 1, 65, 160, 8, 106, 34, 0, 32, 2, 65, 64, 107, 32, 1,
  106, 34, 4, 40, 2, 0, 34, 3, 58, 0, 0, 32, 0, 65, 2, 106, 32, 4, 47, 1, 2, 58,
  0, 0, 32, 0, 65, 3, 106, 32, 4, 45, 0, 3, 58, 0, 0, 32, 0, 65, 1, 106, 32, 3,
  65, 8, 118, 58, 0, 0, 32, 1, 65, 4, 106, 33, 1, 12, 1, 11, 11, 32, 2, 65, 224,
  0, 106, 36, 0, 11, 251, 43, 1, 32, 127, 32, 0, 32, 1, 40, 2, 44, 34, 25, 32,
  1, 40, 2, 40, 34, 15, 32, 1, 40, 2, 20, 34, 18, 32, 18, 32, 1, 40, 2, 52, 34,
  26, 32, 15, 32, 18, 32, 1, 40, 2, 28, 34, 20, 32, 1, 40, 2, 36, 34, 27, 32, 1,
  40, 2, 32, 34, 10, 32, 27, 32, 1, 40, 2, 24, 34, 22, 32, 20, 32, 25, 32, 22,
  32, 1, 40, 2, 4, 34, 19, 32, 0, 40, 2, 16, 34, 30, 106, 32, 0, 40, 2, 8, 34,
  31, 65, 10, 119, 34, 5, 32, 0, 40, 2, 4, 34, 29, 115, 32, 1, 40, 2, 0, 34, 23,
  32, 0, 40, 2, 0, 34, 32, 32, 0, 40, 2, 12, 34, 4, 32, 29, 32, 31, 115, 115,
  106, 106, 65, 11, 119, 32, 30, 106, 34, 17, 115, 106, 65, 14, 119, 32, 4, 106,
  34, 16, 65, 10, 119, 34, 3, 106, 32, 1, 40, 2, 16, 34, 21, 32, 29, 65, 10,
  119, 34, 7, 106, 32, 1, 40, 2, 8, 34, 24, 32, 4, 106, 32, 7, 32, 17, 115, 32,
  16, 115, 106, 65, 15, 119, 32, 5, 106, 34, 2, 32, 3, 115, 32, 1, 40, 2, 12,
  34, 28, 32, 5, 106, 32, 16, 32, 17, 65, 10, 119, 34, 17, 115, 32, 2, 115, 106,
  65, 12, 119, 32, 7, 106, 34, 16, 115, 106, 65, 5, 119, 32, 17, 106, 34, 6, 32,
  16, 65, 10, 119, 34, 8, 115, 32, 17, 32, 18, 106, 32, 16, 32, 2, 65, 10, 119,
  34, 17, 115, 32, 6, 115, 106, 65, 8, 119, 32, 3, 106, 34, 16, 115, 106, 65, 7,
  119, 32, 17, 106, 34, 3, 65, 10, 119, 34, 2, 106, 32, 27, 32, 6, 65, 10, 119,
  34, 6, 106, 32, 17, 32, 20, 106, 32, 6, 32, 16, 115, 32, 3, 115, 106, 65, 9,
  119, 32, 8, 106, 34, 17, 32, 2, 115, 32, 8, 32, 10, 106, 32, 3, 32, 16, 65,
  10, 119, 34, 16, 115, 32, 17, 115, 106, 65, 11, 119, 32, 6, 106, 34, 3, 115,
  106, 65, 13, 119, 32, 16, 106, 34, 6, 32, 3, 65, 10, 119, 34, 8, 115, 32, 2,
  32, 15, 32, 16, 106, 32, 3, 32, 17, 65, 10, 119, 34, 2, 115, 32, 6, 115, 106,
  65, 14, 119, 106, 34, 3, 115, 106, 65, 15, 119, 32, 2, 106, 34, 9, 65, 10,
  119, 34, 11, 106, 32, 3, 65, 10, 119, 34, 12, 32, 1, 40, 2, 60, 34, 17, 106,
  32, 8, 32, 26, 106, 32, 2, 32, 1, 40, 2, 48, 34, 16, 106, 32, 3, 32, 6, 65,
  10, 119, 34, 2, 115, 32, 9, 115, 106, 65, 6, 119, 32, 8, 106, 34, 3, 32, 9,
  32, 12, 115, 115, 106, 65, 7, 119, 32, 2, 106, 34, 6, 32, 3, 65, 10, 119, 34,
  8, 115, 32, 2, 32, 1, 40, 2, 56, 34, 1, 106, 32, 3, 32, 11, 115, 32, 6, 115,
  106, 65, 9, 119, 32, 12, 106, 34, 9, 115, 106, 65, 8, 119, 32, 11, 106, 34, 3,
  32, 9, 113, 32, 6, 65, 10, 119, 34, 6, 32, 3, 65, 127, 115, 113, 114, 106, 65,
  153, 243, 137, 212, 5, 106, 65, 7, 119, 32, 8, 106, 34, 2, 65, 10, 119, 34,
  11, 106, 32, 15, 32, 3, 65, 10, 119, 34, 12, 106, 32, 19, 32, 9, 65, 10, 119,
  34, 9, 106, 32, 6, 32, 26, 106, 32, 8, 32, 21, 106, 32, 2, 32, 3, 113, 32, 9,
  32, 2, 65, 127, 115, 113, 114, 106, 65, 153, 243, 137, 212, 5, 106, 65, 6,
  119, 32, 6, 106, 34, 3, 32, 2, 113, 32, 12, 32, 3, 65, 127, 115, 113, 114,
  106, 65, 153, 243, 137, 212, 5, 106, 65, 8, 119, 32, 9, 106, 34, 2, 32, 3,
  113, 32, 11, 32, 2, 65, 127, 115, 113, 114, 106, 65, 153, 243, 137, 212, 5,
  106, 65, 13, 119, 32, 12, 106, 34, 6, 32, 2, 113, 32, 3, 65, 10, 119, 34, 8,
  32, 6, 65, 127, 115, 113, 114, 106, 65, 153, 243, 137, 212, 5, 106, 65, 11,
  119, 32, 11, 106, 34, 3, 32, 6, 113, 32, 2, 65, 10, 119, 34, 9, 32, 3, 65,
  127, 115, 113, 114, 106, 65, 153, 243, 137, 212, 5, 106, 65, 9, 119, 32, 8,
  106, 34, 2, 65, 10, 119, 34, 11, 106, 32, 23, 32, 3, 65, 10, 119, 34, 12, 106,
  32, 16, 32, 6, 65, 10, 119, 34, 6, 106, 32, 9, 32, 28, 106, 32, 8, 32, 17,
  106, 32, 2, 32, 3, 113, 32, 6, 32, 2, 65, 127, 115, 113, 114, 106, 65, 153,
  243, 137, 212, 5, 106, 65, 7, 119, 32, 9, 106, 34, 3, 32, 2, 113, 32, 12, 32,
  3, 65, 127, 115, 113, 114, 106, 65, 153, 243, 137, 212, 5, 106, 65, 15, 119,
  32, 6, 106, 34, 2, 32, 3, 113, 32, 11, 32, 2, 65, 127, 115, 113, 114, 106, 65,
  153, 243, 137, 212, 5, 106, 65, 7, 119, 32, 12, 106, 34, 6, 32, 2, 113, 32, 3,
  65, 10, 119, 34, 8, 32, 6, 65, 127, 115, 113, 114, 106, 65, 153, 243, 137,
  212, 5, 106, 65, 12, 119, 32, 11, 106, 34, 3, 32, 6, 113, 32, 2, 65, 10, 119,
  34, 9, 32, 3, 65, 127, 115, 113, 114, 106, 65, 153, 243, 137, 212, 5, 106, 65,
  15, 119, 32, 8, 106, 34, 2, 65, 10, 119, 34, 11, 106, 32, 25, 32, 3, 65, 10,
  119, 34, 12, 106, 32, 1, 32, 6, 65, 10, 119, 34, 6, 106, 32, 9, 32, 24, 106,
  32, 8, 32, 18, 106, 32, 2, 32, 3, 113, 32, 6, 32, 2, 65, 127, 115, 113, 114,
  106, 65, 153, 243, 137, 212, 5, 106, 65, 9, 119, 32, 9, 106, 34, 3, 32, 2,
  113, 32, 12, 32, 3, 65, 127, 115, 113, 114, 106, 65, 153, 243, 137, 212, 5,
  106, 65, 11, 119, 32, 6, 106, 34, 2, 32, 3, 113, 32, 11, 32, 2, 65, 127, 115,
  113, 114, 106, 65, 153, 243, 137, 212, 5, 106, 65, 7, 119, 32, 12, 106, 34, 6,
  32, 2, 113, 32, 3, 65, 10, 119, 34, 3, 32, 6, 65, 127, 115, 113, 114, 106, 65,
  153, 243, 137, 212, 5, 106, 65, 13, 119, 32, 11, 106, 34, 8, 32, 6, 113, 32,
  2, 65, 10, 119, 34, 2, 32, 8, 65, 127, 115, 34, 12, 113, 114, 106, 65, 153,
  243, 137, 212, 5, 106, 65, 12, 119, 32, 3, 106, 34, 9, 65, 10, 119, 34, 11,
  106, 32, 21, 32, 8, 65, 10, 119, 34, 8, 106, 32, 1, 32, 6, 65, 10, 119, 34, 6,
  106, 32, 2, 32, 15, 106, 32, 3, 32, 28, 106, 32, 9, 32, 12, 114, 32, 6, 115,
  106, 65, 161, 215, 231, 246, 6, 106, 65, 11, 119, 32, 2, 106, 34, 3, 32, 9,
  65, 127, 115, 114, 32, 8, 115, 106, 65, 161, 215, 231, 246, 6, 106, 65, 13,
  119, 32, 6, 106, 34, 2, 32, 3, 65, 127, 115, 114, 32, 11, 115, 106, 65, 161,
  215, 231, 246, 6, 106, 65, 6, 119, 32, 8, 106, 34, 6, 32, 2, 65, 127, 115,
  114, 32, 3, 65, 10, 119, 34, 3, 115, 106, 65, 161, 215, 231, 246, 6, 106, 65,
  7, 119, 32, 11, 106, 34, 8, 32, 6, 65, 127, 115, 114, 32, 2, 65, 10, 119, 34,
  2, 115, 106, 65, 161, 215, 231, 246, 6, 106, 65, 14, 119, 32, 3, 106, 34, 9,
  65, 10, 119, 34, 11, 106, 32, 24, 32, 8, 65, 10, 119, 34, 12, 106, 32, 19, 32,
  6, 65, 10, 119, 34, 6, 106, 32, 2, 32, 10, 106, 32, 3, 32, 17, 106, 32, 9, 32,
  8, 65, 127, 115, 114, 32, 6, 115, 106, 65, 161, 215, 231, 246, 6, 106, 65, 9,
  119, 32, 2, 106, 34, 3, 32, 9, 65, 127, 115, 114, 32, 12, 115, 106, 65, 161,
  215, 231, 246, 6, 106, 65, 13, 119, 32, 6, 106, 34, 2, 32, 3, 65, 127, 115,
  114, 32, 11, 115, 106, 65, 161, 215, 231, 246, 6, 106, 65, 15, 119, 32, 12,
  106, 34, 6, 32, 2, 65, 127, 115, 114, 32, 3, 65, 10, 119, 34, 3, 115, 106, 65,
  161, 215, 231, 246, 6, 106, 65, 14, 119, 32, 11, 106, 34, 8, 32, 6, 65, 127,
  115, 114, 32, 2, 65, 10, 119, 34, 2, 115, 106, 65, 161, 215, 231, 246, 6, 106,
  65, 8, 119, 32, 3, 106, 34, 9, 65, 10, 119, 34, 11, 106, 32, 25, 32, 8, 65,
  10, 119, 34, 12, 106, 32, 26, 32, 6, 65, 10, 119, 34, 6, 106, 32, 2, 32, 22,
  106, 32, 3, 32, 23, 106, 32, 9, 32, 8, 65, 127, 115, 114, 32, 6, 115, 106, 65,
  161, 215, 231, 246, 6, 106, 65, 13, 119, 32, 2, 106, 34, 3, 32, 9, 65, 127,
  115, 114, 32, 12, 115, 106, 65, 161, 215, 231, 246, 6, 106, 65, 6, 119, 32, 6,
  106, 34, 2, 32, 3, 65, 127, 115, 114, 32, 11, 115, 106, 65, 161, 215, 231,
  246, 6, 106, 65, 5, 119, 32, 12, 106, 34, 6, 32, 2, 65, 127, 115, 114, 32, 3,
  65, 10, 119, 34, 8, 115, 106, 65, 161, 215, 231, 246, 6, 106, 65, 12, 119, 32,
  11, 106, 34, 9, 32, 6, 65, 127, 115, 114, 32, 2, 65, 10, 119, 34, 11, 115,
  106, 65, 161, 215, 231, 246, 6, 106, 65, 7, 119, 32, 8, 106, 34, 12, 65, 10,
  119, 34, 3, 106, 32, 3, 32, 25, 32, 9, 65, 10, 119, 34, 2, 106, 32, 2, 32, 27,
  32, 6, 65, 10, 119, 34, 6, 106, 32, 6, 32, 11, 32, 19, 106, 32, 8, 32, 16,
  106, 32, 12, 32, 9, 65, 127, 115, 114, 32, 6, 115, 106, 65, 161, 215, 231,
  246, 6, 106, 65, 5, 119, 32, 11, 106, 34, 6, 32, 2, 113, 32, 12, 32, 2, 65,
  127, 115, 113, 114, 106, 65, 220, 249, 238, 248, 120, 106, 65, 11, 119, 106,
  34, 2, 32, 3, 113, 32, 6, 32, 3, 65, 127, 115, 113, 114, 106, 65, 220, 249,
  238, 248, 120, 106, 65, 12, 119, 106, 34, 9, 32, 6, 65, 10, 119, 34, 3, 113,
  32, 2, 32, 3, 65, 127, 115, 113, 114, 106, 65, 220, 249, 238, 248, 120, 106,
  65, 14, 119, 106, 34, 11, 32, 2, 65, 10, 119, 34, 2, 113, 32, 9, 32, 2, 65,
  127, 115, 113, 114, 106, 65, 220, 249, 238, 248, 120, 106, 65, 15, 119, 32, 3,
  106, 34, 12, 65, 10, 119, 34, 6, 106, 32, 21, 32, 11, 65, 10, 119, 34, 8, 106,
  32, 16, 32, 9, 65, 10, 119, 34, 9, 106, 32, 2, 32, 10, 106, 32, 3, 32, 23,
  106, 32, 9, 32, 12, 113, 32, 11, 32, 9, 65, 127, 115, 113, 114, 106, 65, 220,
  249, 238, 248, 120, 106, 65, 14, 119, 32, 2, 106, 34, 3, 32, 8, 113, 32, 12,
  32, 8, 65, 127, 115, 113, 114, 106, 65, 220, 249, 238, 248, 120, 106, 65, 15,
  119, 32, 9, 106, 34, 2, 32, 6, 113, 32, 3, 32, 6, 65, 127, 115, 113, 114, 106,
  65, 220, 249, 238, 248, 120, 106, 65, 9, 119, 32, 8, 106, 34, 9, 32, 3, 65,
  10, 119, 34, 3, 113, 32, 2, 32, 3, 65, 127, 115, 113, 114, 106, 65, 220, 249,
  238, 248, 120, 106, 65, 8, 119, 32, 6, 106, 34, 11, 32, 2, 65, 10, 119, 34, 2,
  113, 32, 9, 32, 2, 65, 127, 115, 113, 114, 106, 65, 220, 249, 238, 248, 120,
  106, 65, 9, 119, 32, 3, 106, 34, 12, 65, 10, 119, 34, 6, 106, 32, 1, 32, 11,
  65, 10, 119, 34, 8, 106, 32, 17, 32, 9, 65, 10, 119, 34, 9, 106, 32, 2, 32,
  20, 106, 32, 3, 32, 28, 106, 32, 9, 32, 12, 113, 32, 11, 32, 9, 65, 127, 115,
  113, 114, 106, 65, 220, 249, 238, 248, 120, 106, 65, 14, 119, 32, 2, 106, 34,
  3, 32, 8, 113, 32, 12, 32, 8, 65, 127, 115, 113, 114, 106, 65, 220, 249, 238,
  248, 120, 106, 65, 5, 119, 32, 9, 106, 34, 2, 32, 6, 113, 32, 3, 32, 6, 65,
  127, 115, 113, 114, 106, 65, 220, 249, 238, 248, 120, 106, 65, 6, 119, 32, 8,
  106, 34, 8, 32, 3, 65, 10, 119, 34, 3, 113, 32, 2, 32, 3, 65, 127, 115, 113,
  114, 106, 65, 220, 249, 238, 248, 120, 106, 65, 8, 119, 32, 6, 106, 34, 9, 32,
  2, 65, 10, 119, 34, 2, 113, 32, 8, 32, 2, 65, 127, 115, 113, 114, 106, 65,
  220, 249, 238, 248, 120, 106, 65, 6, 119, 32, 3, 106, 34, 11, 65, 10, 119, 34,
  12, 106, 32, 23, 32, 9, 65, 10, 119, 34, 6, 106, 32, 21, 32, 8, 65, 10, 119,
  34, 8, 106, 32, 2, 32, 24, 106, 32, 3, 32, 22, 106, 32, 8, 32, 11, 113, 32, 9,
  32, 8, 65, 127, 115, 113, 114, 106, 65, 220, 249, 238, 248, 120, 106, 65, 5,
  119, 32, 2, 106, 34, 3, 32, 6, 113, 32, 11, 32, 6, 65, 127, 115, 113, 114,
  106, 65, 220, 249, 238, 248, 120, 106, 65, 12, 119, 32, 8, 106, 34, 2, 32, 3,
  32, 12, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207, 202, 122, 106, 65, 9,
  119, 32, 6, 106, 34, 6, 32, 2, 32, 3, 65, 10, 119, 34, 3, 65, 127, 115, 114,
  115, 106, 65, 206, 250, 207, 202, 122, 106, 65, 15, 119, 32, 12, 106, 34, 8,
  32, 6, 32, 2, 65, 10, 119, 34, 2, 65, 127, 115, 114, 115, 106, 65, 206, 250,
  207, 202, 122, 106, 65, 5, 119, 32, 3, 106, 34, 9, 65, 10, 119, 34, 11, 106,
  32, 24, 32, 8, 65, 10, 119, 34, 12, 106, 32, 16, 32, 6, 65, 10, 119, 34, 6,
  106, 32, 2, 32, 20, 106, 32, 3, 32, 27, 106, 32, 9, 32, 8, 32, 6, 65, 127,
  115, 114, 115, 106, 65, 206, 250, 207, 202, 122, 106, 65, 11, 119, 32, 2, 106,
  34, 3, 32, 9, 32, 12, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207, 202,
  122, 106, 65, 6, 119, 32, 6, 106, 34, 2, 32, 3, 32, 11, 65, 127, 115, 114,
  115, 106, 65, 206, 250, 207, 202, 122, 106, 65, 8, 119, 32, 12, 106, 34, 6,
  32, 2, 32, 3, 65, 10, 119, 34, 3, 65, 127, 115, 114, 115, 106, 65, 206, 250,
  207, 202, 122, 106, 65, 13, 119, 32, 11, 106, 34, 8, 32, 6, 32, 2, 65, 10,
  119, 34, 2, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207, 202, 122, 106, 65,
  12, 119, 32, 3, 106, 34, 9, 65, 10, 119, 34, 11, 106, 32, 10, 32, 8, 65, 10,
  119, 34, 12, 106, 32, 28, 32, 6, 65, 10, 119, 34, 6, 106, 32, 2, 32, 19, 106,
  32, 1, 32, 3, 106, 32, 9, 32, 8, 32, 6, 65, 127, 115, 114, 115, 106, 65, 206,
  250, 207, 202, 122, 106, 65, 5, 119, 32, 2, 106, 34, 3, 32, 9, 32, 12, 65,
  127, 115, 114, 115, 106, 65, 206, 250, 207, 202, 122, 106, 65, 12, 119, 32, 6,
  106, 34, 2, 32, 3, 32, 11, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207,
  202, 122, 106, 65, 13, 119, 32, 12, 106, 34, 6, 32, 2, 32, 3, 65, 10, 119, 34,
  8, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207, 202, 122, 106, 65, 14, 119,
  32, 11, 106, 34, 9, 32, 6, 32, 2, 65, 10, 119, 34, 11, 65, 127, 115, 114, 115,
  106, 65, 206, 250, 207, 202, 122, 106, 65, 11, 119, 32, 8, 106, 34, 12, 65,
  10, 119, 34, 33, 32, 4, 106, 32, 1, 32, 10, 32, 27, 32, 23, 32, 21, 32, 23,
  32, 25, 32, 28, 32, 19, 32, 17, 32, 23, 32, 16, 32, 17, 32, 24, 32, 32, 32,
  31, 32, 4, 65, 127, 115, 114, 32, 29, 115, 106, 32, 18, 106, 65, 230, 151,
  138, 133, 5, 106, 65, 8, 119, 32, 30, 106, 34, 3, 65, 10, 119, 34, 2, 106, 32,
  7, 32, 27, 106, 32, 5, 32, 23, 106, 32, 4, 32, 20, 106, 32, 30, 32, 3, 32, 29,
  32, 5, 65, 127, 115, 114, 115, 106, 32, 1, 106, 65, 230, 151, 138, 133, 5,
  106, 65, 9, 119, 32, 4, 106, 34, 4, 32, 3, 32, 7, 65, 127, 115, 114, 115, 106,
  65, 230, 151, 138, 133, 5, 106, 65, 9, 119, 32, 5, 106, 34, 5, 32, 4, 32, 2,
  65, 127, 115, 114, 115, 106, 65, 230, 151, 138, 133, 5, 106, 65, 11, 119, 32,
  7, 106, 34, 7, 32, 5, 32, 4, 65, 10, 119, 34, 4, 65, 127, 115, 114, 115, 106,
  65, 230, 151, 138, 133, 5, 106, 65, 13, 119, 32, 2, 106, 34, 3, 32, 7, 32, 5,
  65, 10, 119, 34, 5, 65, 127, 115, 114, 115, 106, 65, 230, 151, 138, 133, 5,
  106, 65, 15, 119, 32, 4, 106, 34, 2, 65, 10, 119, 34, 13, 106, 32, 22, 32, 3,
  65, 10, 119, 34, 14, 106, 32, 26, 32, 7, 65, 10, 119, 34, 7, 106, 32, 5, 32,
  21, 106, 32, 4, 32, 25, 106, 32, 2, 32, 3, 32, 7, 65, 127, 115, 114, 115, 106,
  65, 230, 151, 138, 133, 5, 106, 65, 15, 119, 32, 5, 106, 34, 4, 32, 2, 32, 14,
  65, 127, 115, 114, 115, 106, 65, 230, 151, 138, 133, 5, 106, 65, 5, 119, 32,
  7, 106, 34, 5, 32, 4, 32, 13, 65, 127, 115, 114, 115, 106, 65, 230, 151, 138,
  133, 5, 106, 65, 7, 119, 32, 14, 106, 34, 7, 32, 5, 32, 4, 65, 10, 119, 34, 4,
  65, 127, 115, 114, 115, 106, 65, 230, 151, 138, 133, 5, 106, 65, 7, 119, 32,
  13, 106, 34, 3, 32, 7, 32, 5, 65, 10, 119, 34, 5, 65, 127, 115, 114, 115, 106,
  65, 230, 151, 138, 133, 5, 106, 65, 8, 119, 32, 4, 106, 34, 2, 65, 10, 119,
  34, 13, 106, 32, 28, 32, 3, 65, 10, 119, 34, 14, 106, 32, 15, 32, 7, 65, 10,
  119, 34, 7, 106, 32, 5, 32, 19, 106, 32, 4, 32, 10, 106, 32, 2, 32, 3, 32, 7,
  65, 127, 115, 114, 115, 106, 65, 230, 151, 138, 133, 5, 106, 65, 11, 119, 32,
  5, 106, 34, 4, 32, 2, 32, 14, 65, 127, 115, 114, 115, 106, 65, 230, 151, 138,
  133, 5, 106, 65, 14, 119, 32, 7, 106, 34, 5, 32, 4, 32, 13, 65, 127, 115, 114,
  115, 106, 65, 230, 151, 138, 133, 5, 106, 65, 14, 119, 32, 14, 106, 34, 7, 32,
  5, 32, 4, 65, 10, 119, 34, 3, 65, 127, 115, 114, 115, 106, 65, 230, 151, 138,
  133, 5, 106, 65, 12, 119, 32, 13, 106, 34, 2, 32, 7, 32, 5, 65, 10, 119, 34,
  13, 65, 127, 115, 114, 115, 106, 65, 230, 151, 138, 133, 5, 106, 65, 6, 119,
  32, 3, 106, 34, 14, 65, 10, 119, 34, 4, 106, 32, 4, 32, 20, 32, 2, 65, 10,
  119, 34, 5, 106, 32, 5, 32, 28, 32, 7, 65, 10, 119, 34, 7, 106, 32, 7, 32, 13,
  32, 25, 106, 32, 3, 32, 22, 106, 32, 7, 32, 14, 113, 32, 2, 32, 7, 65, 127,
  115, 113, 114, 106, 65, 164, 162, 183, 226, 5, 106, 65, 9, 119, 32, 13, 106,
  34, 7, 32, 5, 113, 32, 14, 32, 5, 65, 127, 115, 113, 114, 106, 65, 164, 162,
  183, 226, 5, 106, 65, 13, 119, 106, 34, 5, 32, 4, 113, 32, 7, 32, 4, 65, 127,
  115, 113, 114, 106, 65, 164, 162, 183, 226, 5, 106, 65, 15, 119, 106, 34, 2,
  32, 7, 65, 10, 119, 34, 4, 113, 32, 5, 32, 4, 65, 127, 115, 113, 114, 106, 65,
  164, 162, 183, 226, 5, 106, 65, 7, 119, 106, 34, 13, 32, 5, 65, 10, 119, 34,
  5, 113, 32, 2, 32, 5, 65, 127, 115, 113, 114, 106, 65, 164, 162, 183, 226, 5,
  106, 65, 12, 119, 32, 4, 106, 34, 14, 65, 10, 119, 34, 7, 106, 32, 1, 32, 13,
  65, 10, 119, 34, 3, 106, 32, 15, 32, 2, 65, 10, 119, 34, 2, 106, 32, 5, 32,
  18, 106, 32, 4, 32, 26, 106, 32, 2, 32, 14, 113, 32, 13, 32, 2, 65, 127, 115,
  113, 114, 106, 65, 164, 162, 183, 226, 5, 106, 65, 8, 119, 32, 5, 106, 34, 4,
  32, 3, 113, 32, 14, 32, 3, 65, 127, 115, 113, 114, 106, 65, 164, 162, 183,
  226, 5, 106, 65, 9, 119, 32, 2, 106, 34, 5, 32, 7, 113, 32, 4, 32, 7, 65, 127,
  115, 113, 114, 106, 65, 164, 162, 183, 226, 5, 106, 65, 11, 119, 32, 3, 106,
  34, 2, 32, 4, 65, 10, 119, 34, 4, 113, 32, 5, 32, 4, 65, 127, 115, 113, 114,
  106, 65, 164, 162, 183, 226, 5, 106, 65, 7, 119, 32, 7, 106, 34, 13, 32, 5,
  65, 10, 119, 34, 5, 113, 32, 2, 32, 5, 65, 127, 115, 113, 114, 106, 65, 164,
  162, 183, 226, 5, 106, 65, 7, 119, 32, 4, 106, 34, 14, 65, 10, 119, 34, 7,
  106, 32, 7, 32, 27, 32, 13, 65, 10, 119, 34, 3, 106, 32, 21, 32, 2, 65, 10,
  119, 34, 2, 106, 32, 5, 32, 16, 106, 32, 4, 32, 10, 106, 32, 2, 32, 14, 113,
  32, 13, 32, 2, 65, 127, 115, 113, 114, 106, 65, 164, 162, 183, 226, 5, 106,
  65, 12, 119, 32, 5, 106, 34, 4, 32, 3, 113, 32, 14, 32, 3, 65, 127, 115, 113,
  114, 106, 65, 164, 162, 183, 226, 5, 106, 65, 7, 119, 32, 2, 106, 34, 5, 32,
  7, 113, 32, 4, 32, 7, 65, 127, 115, 113, 114, 106, 65, 164, 162, 183, 226, 5,
  106, 65, 6, 119, 32, 3, 106, 34, 7, 32, 4, 65, 10, 119, 34, 4, 113, 32, 5, 32,
  4, 65, 127, 115, 113, 114, 106, 65, 164, 162, 183, 226, 5, 106, 65, 15, 119,
  106, 34, 3, 32, 5, 65, 10, 119, 34, 5, 113, 32, 7, 32, 5, 65, 127, 115, 113,
  114, 106, 65, 164, 162, 183, 226, 5, 106, 65, 13, 119, 32, 4, 106, 34, 2, 65,
  10, 119, 34, 13, 106, 32, 19, 32, 3, 65, 10, 119, 34, 14, 106, 32, 18, 32, 7,
  65, 10, 119, 34, 7, 106, 32, 5, 32, 17, 106, 32, 4, 32, 24, 106, 32, 2, 32, 7,
  113, 32, 3, 32, 7, 65, 127, 115, 113, 114, 106, 65, 164, 162, 183, 226, 5,
  106, 65, 11, 119, 32, 5, 106, 34, 4, 32, 2, 65, 127, 115, 114, 32, 14, 115,
  106, 65, 243, 253, 192, 235, 6, 106, 65, 9, 119, 32, 7, 106, 34, 5, 32, 4, 65,
  127, 115, 114, 32, 13, 115, 106, 65, 243, 253, 192, 235, 6, 106, 65, 7, 119,
  32, 14, 106, 34, 7, 32, 5, 65, 127, 115, 114, 32, 4, 65, 10, 119, 34, 4, 115,
  106, 65, 243, 253, 192, 235, 6, 106, 65, 15, 119, 32, 13, 106, 34, 3, 32, 7,
  65, 127, 115, 114, 32, 5, 65, 10, 119, 34, 5, 115, 106, 65, 243, 253, 192,
  235, 6, 106, 65, 11, 119, 32, 4, 106, 34, 2, 65, 10, 119, 34, 13, 106, 32, 27,
  32, 3, 65, 10, 119, 34, 14, 106, 32, 22, 32, 7, 65, 10, 119, 34, 7, 106, 32,
  1, 32, 5, 106, 32, 4, 32, 20, 106, 32, 2, 32, 3, 65, 127, 115, 114, 32, 7,
  115, 106, 65, 243, 253, 192, 235, 6, 106, 65, 8, 119, 32, 5, 106, 34, 4, 32,
  2, 65, 127, 115, 114, 32, 14, 115, 106, 65, 243, 253, 192, 235, 6, 106, 65, 6,
  119, 32, 7, 106, 34, 5, 32, 4, 65, 127, 115, 114, 32, 13, 115, 106, 65, 243,
  253, 192, 235, 6, 106, 65, 6, 119, 32, 14, 106, 34, 7, 32, 5, 65, 127, 115,
  114, 32, 4, 65, 10, 119, 34, 4, 115, 106, 65, 243, 253, 192, 235, 6, 106, 65,
  14, 119, 32, 13, 106, 34, 3, 32, 7, 65, 127, 115, 114, 32, 5, 65, 10, 119, 34,
  5, 115, 106, 65, 243, 253, 192, 235, 6, 106, 65, 12, 119, 32, 4, 106, 34, 2,
  65, 10, 119, 34, 13, 106, 32, 15, 32, 3, 65, 10, 119, 34, 14, 106, 32, 24, 32,
  7, 65, 10, 119, 34, 7, 106, 32, 5, 32, 16, 106, 32, 4, 32, 10, 106, 32, 2, 32,
  3, 65, 127, 115, 114, 32, 7, 115, 106, 65, 243, 253, 192, 235, 6, 106, 65, 13,
  119, 32, 5, 106, 34, 4, 32, 2, 65, 127, 115, 114, 32, 14, 115, 106, 65, 243,
  253, 192, 235, 6, 106, 65, 5, 119, 32, 7, 106, 34, 5, 32, 4, 65, 127, 115,
  114, 32, 13, 115, 106, 65, 243, 253, 192, 235, 6, 106, 65, 14, 119, 32, 14,
  106, 34, 7, 32, 5, 65, 127, 115, 114, 32, 4, 65, 10, 119, 34, 4, 115, 106, 65,
  243, 253, 192, 235, 6, 106, 65, 13, 119, 32, 13, 106, 34, 3, 32, 7, 65, 127,
  115, 114, 32, 5, 65, 10, 119, 34, 5, 115, 106, 65, 243, 253, 192, 235, 6, 106,
  65, 13, 119, 32, 4, 106, 34, 2, 65, 10, 119, 34, 13, 106, 32, 22, 32, 3, 65,
  10, 119, 34, 14, 106, 32, 10, 32, 7, 65, 10, 119, 34, 7, 106, 32, 5, 32, 26,
  106, 32, 4, 32, 21, 106, 32, 2, 32, 3, 65, 127, 115, 114, 32, 7, 115, 106, 65,
  243, 253, 192, 235, 6, 106, 65, 7, 119, 32, 5, 106, 34, 5, 32, 2, 65, 127,
  115, 114, 32, 14, 115, 106, 65, 243, 253, 192, 235, 6, 106, 65, 5, 119, 32, 7,
  106, 34, 10, 32, 5, 113, 32, 13, 32, 10, 65, 127, 115, 113, 114, 106, 65, 233,
  237, 181, 211, 7, 106, 65, 15, 119, 32, 14, 106, 34, 4, 32, 10, 113, 32, 5,
  65, 10, 119, 34, 7, 32, 4, 65, 127, 115, 113, 114, 106, 65, 233, 237, 181,
  211, 7, 106, 65, 5, 119, 32, 13, 106, 34, 5, 32, 4, 113, 32, 10, 65, 10, 119,
  34, 3, 32, 5, 65, 127, 115, 113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65,
  8, 119, 32, 7, 106, 34, 10, 65, 10, 119, 34, 2, 106, 32, 17, 32, 5, 65, 10,
  119, 34, 13, 106, 32, 25, 32, 4, 65, 10, 119, 34, 4, 106, 32, 3, 32, 28, 106,
  32, 10, 32, 7, 32, 19, 106, 32, 5, 32, 10, 113, 32, 4, 32, 10, 65, 127, 115,
  113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65, 11, 119, 32, 3, 106, 34,
  10, 113, 32, 13, 32, 10, 65, 127, 115, 113, 114, 106, 65, 233, 237, 181, 211,
  7, 106, 65, 14, 119, 32, 4, 106, 34, 4, 32, 10, 113, 32, 2, 32, 4, 65, 127,
  115, 113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65, 14, 119, 32, 13, 106,
  34, 5, 32, 4, 113, 32, 10, 65, 10, 119, 34, 7, 32, 5, 65, 127, 115, 113, 114,
  106, 65, 233, 237, 181, 211, 7, 106, 65, 6, 119, 32, 2, 106, 34, 10, 32, 5,
  113, 32, 4, 65, 10, 119, 34, 3, 32, 10, 65, 127, 115, 113, 114, 106, 65, 233,
  237, 181, 211, 7, 106, 65, 14, 119, 32, 7, 106, 34, 4, 65, 10, 119, 34, 2,
  106, 32, 26, 32, 10, 65, 10, 119, 34, 13, 106, 32, 24, 32, 5, 65, 10, 119, 34,
  5, 106, 32, 3, 32, 16, 106, 32, 7, 32, 18, 106, 32, 4, 32, 10, 113, 32, 5, 32,
  4, 65, 127, 115, 113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65, 6, 119,
  32, 3, 106, 34, 10, 32, 4, 113, 32, 13, 32, 10, 65, 127, 115, 113, 114, 106,
  65, 233, 237, 181, 211, 7, 106, 65, 9, 119, 32, 5, 106, 34, 4, 32, 10, 113,
  32, 2, 32, 4, 65, 127, 115, 113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65,
  12, 119, 32, 13, 106, 34, 5, 32, 4, 113, 32, 10, 65, 10, 119, 34, 7, 32, 5,
  65, 127, 115, 113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65, 9, 119, 32,
  2, 106, 34, 10, 32, 5, 113, 32, 4, 65, 10, 119, 34, 3, 32, 10, 65, 127, 115,
  113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65, 12, 119, 32, 7, 106, 34, 4,
  65, 10, 119, 34, 2, 32, 17, 106, 32, 1, 32, 5, 65, 10, 119, 34, 5, 106, 32, 3,
  32, 15, 106, 32, 7, 32, 20, 106, 32, 4, 32, 10, 113, 32, 5, 32, 4, 65, 127,
  115, 113, 114, 106, 65, 233, 237, 181, 211, 7, 106, 65, 5, 119, 32, 3, 106,
  34, 1, 32, 4, 113, 32, 10, 65, 10, 119, 34, 4, 32, 1, 65, 127, 115, 113, 114,
  106, 65, 233, 237, 181, 211, 7, 106, 65, 15, 119, 32, 5, 106, 34, 10, 32, 1,
  113, 32, 2, 32, 10, 65, 127, 115, 113, 114, 106, 65, 233, 237, 181, 211, 7,
  106, 65, 8, 119, 32, 4, 106, 34, 5, 32, 10, 65, 10, 119, 34, 7, 115, 32, 4,
  32, 16, 106, 32, 10, 32, 1, 65, 10, 119, 34, 1, 115, 32, 5, 115, 106, 65, 8,
  119, 32, 2, 106, 34, 10, 115, 106, 65, 5, 119, 32, 1, 106, 34, 16, 65, 10,
  119, 34, 4, 106, 32, 19, 32, 5, 65, 10, 119, 34, 19, 106, 32, 1, 32, 15, 106,
  32, 10, 32, 19, 115, 32, 16, 115, 106, 65, 12, 119, 32, 7, 106, 34, 1, 32, 4,
  115, 32, 7, 32, 21, 106, 32, 16, 32, 10, 65, 10, 119, 34, 15, 115, 32, 1, 115,
  106, 65, 9, 119, 32, 19, 106, 34, 10, 115, 106, 65, 12, 119, 32, 15, 106, 34,
  19, 32, 10, 65, 10, 119, 34, 21, 115, 32, 15, 32, 18, 106, 32, 10, 32, 1, 65,
  10, 119, 34, 1, 115, 32, 19, 115, 106, 65, 5, 119, 32, 4, 106, 34, 15, 115,
  106, 65, 14, 119, 32, 1, 106, 34, 18, 65, 10, 119, 34, 10, 106, 32, 19, 65,
  10, 119, 34, 19, 32, 24, 106, 32, 1, 32, 20, 106, 32, 15, 32, 19, 115, 32, 18,
  115, 106, 65, 6, 119, 32, 21, 106, 34, 1, 32, 10, 115, 32, 21, 32, 22, 106,
  32, 18, 32, 15, 65, 10, 119, 34, 15, 115, 32, 1, 115, 106, 65, 8, 119, 32, 19,
  106, 34, 18, 115, 106, 65, 13, 119, 32, 15, 106, 34, 20, 32, 18, 65, 10, 119,
  34, 19, 115, 32, 15, 32, 26, 106, 32, 18, 32, 1, 65, 10, 119, 34, 1, 115, 32,
  20, 115, 106, 65, 6, 119, 32, 10, 106, 34, 15, 115, 106, 65, 5, 119, 32, 1,
  106, 34, 18, 65, 10, 119, 34, 10, 106, 54, 2, 8, 32, 0, 32, 1, 32, 23, 106,
  32, 15, 32, 20, 65, 10, 119, 34, 1, 115, 32, 18, 115, 106, 65, 15, 119, 32,
  19, 106, 34, 20, 65, 10, 119, 34, 24, 32, 31, 32, 8, 32, 22, 106, 32, 12, 32,
  9, 32, 6, 65, 10, 119, 34, 22, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207,
  202, 122, 106, 65, 8, 119, 32, 11, 106, 34, 23, 65, 10, 119, 106, 106, 54, 2,
  4, 32, 0, 32, 29, 32, 11, 32, 17, 106, 32, 23, 32, 12, 32, 9, 65, 10, 119, 34,
  21, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207, 202, 122, 106, 65, 5, 119,
  32, 22, 106, 34, 17, 106, 32, 19, 32, 28, 106, 32, 18, 32, 15, 65, 10, 119,
  34, 15, 115, 32, 20, 115, 106, 65, 13, 119, 32, 1, 106, 34, 18, 65, 10, 119,
  106, 54, 2, 0, 32, 0, 32, 1, 32, 27, 106, 32, 10, 32, 20, 115, 32, 18, 115,
  106, 65, 11, 119, 32, 15, 106, 34, 1, 32, 21, 32, 32, 106, 32, 22, 32, 26,
  106, 32, 17, 32, 23, 32, 33, 65, 127, 115, 114, 115, 106, 65, 206, 250, 207,
  202, 122, 106, 65, 6, 119, 106, 106, 54, 2, 16, 32, 0, 32, 21, 32, 30, 106,
  32, 10, 106, 32, 15, 32, 25, 106, 32, 18, 32, 24, 115, 32, 1, 115, 106, 65,
  11, 119, 106, 54, 2, 12, 11, 36, 1, 2, 127, 65, 160, 8, 33, 1, 2, 64, 2, 64,
  2, 64, 32, 0, 14, 2, 1, 0, 2, 11, 65, 192, 8, 33, 1, 11, 32, 1, 33, 2, 11, 32,
  2, 11, 6, 0, 32, 0, 16, 1, 11, 11, 27, 1, 0, 65, 128, 8, 11, 20, 1, 35, 69,
  103, 137, 171, 205, 239, 254, 220, 186, 152, 118, 84, 50, 16, 240, 225, 210,
  195, 0, 38, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114,
  111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 1, 5, 99, 108, 97, 110, 103, 6,
  49, 49, 46, 48, 46, 48,
];
async function ripemd160(message) {
  if (message.length > 65536)
    throw new RangeError("Message must be less than 65,536 characters.");
  const type = typeof message;
  if (typeof message == "string")
    message = new Uint8Array(
      // @ts-ignore
      message.match(/.{1}/gmu).map((i) => i.charCodeAt(0))
    );
  const {
    instance: {
      exports: { memory, get_ptr, digest },
    },
  } = await WebAssembly.instantiate(new Uint8Array(WASM));
  if (message instanceof Uint8Array) {
    const cArray = new Uint8Array(memory.buffer, get_ptr(1), message.length);
    cArray.set(message);
    digest(message.length);
  } else throw new TypeError("message must be of type Uint8Array or string");
  const bytes = new Uint8Array(memory.buffer).slice(
    // @ts-ignore
    get_ptr(0),
    // @ts-ignore
    get_ptr(0) + 20
  );
  return type == "string"
    ? bytes.reduce((acc, i) => (acc += i.toString(16).padStart(2, "0")), "")
    : bytes;
}

// node_modules/antelope-ecc/keys/legacy_from_public_key.js
async function legacy_from_public_key(public_key, prefix) {
  if (!prefix)
    throw new Error(
      "Please include a prefix for the WIF public key, e.g EOS, TELOS."
    );
  const checksum = (await ripemd160(public_key)).slice(0, 4);
  return (
    prefix +
    binary_to_base58_default(Uint8Array.from([...public_key, ...checksum]))
  );
}

// node_modules/base58-js/base58_to_binary.js
function base58_to_binary(base58String) {
  if (!base58String || typeof base58String !== "string")
    throw new Error(
      `Expected base58 string but got \u201C${base58String}\u201D`
    );
  if (base58String.match(/[IOl0]/gmu))
    throw new Error(
      `Invalid base58 character \u201C${base58String.match(/[IOl0]/gmu)}\u201D`
    );
  const lz = base58String.match(/^1+/gmu);
  const psz = lz ? lz[0].length : 0;
  const size =
    ((base58String.length - psz) * (Math.log(58) / Math.log(256)) + 1) >>> 0;
  return new Uint8Array([
    ...new Uint8Array(psz),
    ...base58String
      .match(/.{1}/gmu)
      .map((i) => base58_chars_default.indexOf(i))
      .reduce((acc, i) => {
        acc = acc.map((j) => {
          const x = j * 58 + i;
          i = x >> 8;
          return x;
        });
        return acc;
      }, new Uint8Array(size))
      .reverse()
      .filter(
        /* @__PURE__ */ (
          (lastValue) => (value) =>
            // @ts-ignore
            (lastValue = lastValue || value)
        )(false)
      ),
  ]);
}
var base58_to_binary_default = base58_to_binary;

// node_modules/antelope-ecc/keys/legacy_to_private_key.js
function legacy_to_private_key(wif_private_key) {
  return base58_to_binary_default(wif_private_key).slice(1, 33);
}

// node_modules/antelope-ecc/keys/legacy_to_public_key.js
function legacy_to_public_key(wif_public_key) {
  return base58_to_binary_default(
    wif_public_key.replace(/^[A-Z]+/gmu, "")
  ).slice(0, -4);
}

// node_modules/antelope-ecc/keys/private_key_from_wif.js
function private_key_from_wif(private_key) {
  if (!private_key.startsWith("PVT_K1_"))
    throw new Error("Antelope private key must start with \u201CPVT_K1_\u201D");
  return base58_to_binary_default(private_key.replace("PVT_K1_", "")).slice(
    0,
    -4
  );
}

// node_modules/antelope-ecc/keys/private_key_to_wif.js
async function private_key_to_wif(private_key) {
  const checksum = await ripemd160(Uint8Array.from([...private_key, 75, 49]));
  return (
    "PVT_K1_" +
    binary_to_base58_default(
      Uint8Array.from([...private_key, ...checksum.slice(0, 4)])
    )
  );
}

// node_modules/antelope-ecc/keys/public_key_from_private_wif.js
init_get_public_key();

// node_modules/antelope-ecc/keys/public_key_to_wif.js
async function public_key_to_wif(public_key) {
  const hash = await ripemd160(Uint8Array.from([...public_key, 75, 49]));
  const checksum = hash.slice(0, 4);
  return (
    "PUB_K1_" +
    binary_to_base58_default(new Uint8Array([...public_key, ...checksum]))
  );
}

// node_modules/antelope-ecc/keys/validate_private_key.js
async function validate_private_key(wif_private_key) {
  let key_type;
  const key_code = [
    [75, 49],
    // K1
    [82, 49],
    // R1
    [87, 65],
    // WA
  ];
  if (wif_private_key.startsWith("PVT_K1")) key_type = 0;
  else if (wif_private_key.startsWith("PVT_R1")) key_type = 1;
  else if (wif_private_key.startsWith("PVT_WA")) key_type = 2;
  else throw new Error("Invalid wif private key");
  const base58_str = base58_to_binary_default(
    wif_private_key
      .replace("PVT_K1_", "")
      .replace("PVT_R1_", "")
      .replace("PVT_WA_", "")
  );
  const checksum_check = base58_str.slice(-4);
  const checksum = await ripemd160(
    Uint8Array.from([...base58_str.slice(0, -4), ...key_code[key_type]])
  );
  for (let i = 0; i < 4; i++)
    if (checksum[i] !== checksum_check[i]) throw new Error("Invalid checksum");
  return true;
}

// node_modules/antelope-ecc/keys/public_key_from_private_wif.js
async function public_key_from_private_key(wif_private_key) {
  await validate_private_key(wif_private_key);
  if (!wif_private_key.startsWith("PVT_K1_"))
    throw new Error("Private key must be K1 key, \u201CPVT_K1_\u2026\u201D");
  const raw_pk = base58_to_binary_default(
    wif_private_key.replace("PVT_K1_", "")
  ).slice(0, -4);
  return public_key_to_wif(await get_public_key_default(raw_pk));
}

// node_modules/antelope-ecc/keys/public_key_from_wif.js
function public_key_from_wif(wif_public_key) {
  if (!wif_public_key.startsWith("PUB_K1_"))
    throw new Error("Expected public key to start with PUB_K1_");
  return base58_to_binary_default(wif_public_key.replace("PUB_K1_", "")).slice(
    0,
    -4
  );
}

// node_modules/antelope-ecc/keys/validate_public_key.js
async function validate_public_key(wif_public_key) {
  let key_type;
  const key_code = [
    [75, 49],
    [82, 49],
    [87, 65],
  ];
  if (wif_public_key.startsWith("PUB_K1_")) key_type = 0;
  else if (wif_public_key.startsWith("PUB_R1_")) key_type = 1;
  else if (wif_public_key.startsWith("PUB_WA_")) key_type = 2;
  else
    throw new Error("Public keys need to start with PUB_K1, PUB_R1 or PUB_WA.");
  let public_key = wif_public_key
    .replace("PUB_K1_", "")
    .replace("PUB_R1_", "")
    .replace("PUB_WA_", "");
  const base58_str = base58_to_binary_default(public_key);
  const checksum_check = base58_str.slice(-4);
  const checksum = await ripemd160(
    Uint8Array.from([...base58_str.slice(0, -4), ...key_code[key_type]])
  );
  for (let i = 0; i < 4; i++)
    if (checksum[i] !== checksum_check[i]) throw new Error("Invalid checksum");
  return true;
}

// node_modules/antelope-ecc/internal/mnemonic-words.js
var words = [
  "abandon",
  "ability",
  "able",
  "about",
  "above",
  "absent",
  "absorb",
  "abstract",
  "absurd",
  "abuse",
  "access",
  "accident",
  "account",
  "accuse",
  "achieve",
  "acid",
  "acoustic",
  "acquire",
  "across",
  "act",
  "action",
  "actor",
  "actress",
  "actual",
  "adapt",
  "add",
  "addict",
  "address",
  "adjust",
  "admit",
  "adult",
  "advance",
  "advice",
  "aerobic",
  "affair",
  "afford",
  "afraid",
  "again",
  "age",
  "agent",
  "agree",
  "ahead",
  "aim",
  "air",
  "airport",
  "aisle",
  "alarm",
  "album",
  "alcohol",
  "alert",
  "alien",
  "all",
  "alley",
  "allow",
  "almost",
  "alone",
  "alpha",
  "already",
  "also",
  "alter",
  "always",
  "amateur",
  "amazing",
  "among",
  "amount",
  "amused",
  "analyst",
  "anchor",
  "ancient",
  "anger",
  "angle",
  "angry",
  "animal",
  "ankle",
  "announce",
  "annual",
  "another",
  "answer",
  "antenna",
  "antique",
  "anxiety",
  "any",
  "apart",
  "apology",
  "appear",
  "apple",
  "approve",
  "april",
  "arch",
  "arctic",
  "area",
  "arena",
  "argue",
  "arm",
  "armed",
  "armor",
  "army",
  "around",
  "arrange",
  "arrest",
  "arrive",
  "arrow",
  "art",
  "artefact",
  "artist",
  "artwork",
  "ask",
  "aspect",
  "assault",
  "asset",
  "assist",
  "assume",
  "asthma",
  "athlete",
  "atom",
  "attack",
  "attend",
  "attitude",
  "attract",
  "auction",
  "audit",
  "august",
  "aunt",
  "author",
  "auto",
  "autumn",
  "average",
  "avocado",
  "avoid",
  "awake",
  "aware",
  "away",
  "awesome",
  "awful",
  "awkward",
  "axis",
  "baby",
  "bachelor",
  "bacon",
  "badge",
  "bag",
  "balance",
  "balcony",
  "ball",
  "bamboo",
  "banana",
  "banner",
  "bar",
  "barely",
  "bargain",
  "barrel",
  "base",
  "basic",
  "basket",
  "battle",
  "beach",
  "bean",
  "beauty",
  "because",
  "become",
  "beef",
  "before",
  "begin",
  "behave",
  "behind",
  "believe",
  "below",
  "belt",
  "bench",
  "benefit",
  "best",
  "betray",
  "better",
  "between",
  "beyond",
  "bicycle",
  "bid",
  "bike",
  "bind",
  "biology",
  "bird",
  "birth",
  "bitter",
  "black",
  "blade",
  "blame",
  "blanket",
  "blast",
  "bleak",
  "bless",
  "blind",
  "blood",
  "blossom",
  "blouse",
  "blue",
  "blur",
  "blush",
  "board",
  "boat",
  "body",
  "boil",
  "bomb",
  "bone",
  "bonus",
  "book",
  "boost",
  "border",
  "boring",
  "borrow",
  "boss",
  "bottom",
  "bounce",
  "box",
  "boy",
  "bracket",
  "brain",
  "brand",
  "brass",
  "brave",
  "bread",
  "breeze",
  "brick",
  "bridge",
  "brief",
  "bright",
  "bring",
  "brisk",
  "broccoli",
  "broken",
  "bronze",
  "broom",
  "brother",
  "brown",
  "brush",
  "bubble",
  "buddy",
  "budget",
  "buffalo",
  "build",
  "bulb",
  "bulk",
  "bullet",
  "bundle",
  "bunker",
  "burden",
  "burger",
  "burst",
  "bus",
  "business",
  "busy",
  "butter",
  "buyer",
  "buzz",
  "cabbage",
  "cabin",
  "cable",
  "cactus",
  "cage",
  "cake",
  "call",
  "calm",
  "camera",
  "camp",
  "can",
  "canal",
  "cancel",
  "candy",
  "cannon",
  "canoe",
  "canvas",
  "canyon",
  "capable",
  "capital",
  "captain",
  "car",
  "carbon",
  "card",
  "cargo",
  "carpet",
  "carry",
  "cart",
  "case",
  "cash",
  "casino",
  "castle",
  "casual",
  "cat",
  "catalog",
  "catch",
  "category",
  "cattle",
  "caught",
  "cause",
  "caution",
  "cave",
  "ceiling",
  "celery",
  "cement",
  "census",
  "century",
  "cereal",
  "certain",
  "chair",
  "chalk",
  "champion",
  "change",
  "chaos",
  "chapter",
  "charge",
  "chase",
  "chat",
  "cheap",
  "check",
  "cheese",
  "chef",
  "cherry",
  "chest",
  "chicken",
  "chief",
  "child",
  "chimney",
  "choice",
  "choose",
  "chronic",
  "chuckle",
  "chunk",
  "churn",
  "cigar",
  "cinnamon",
  "circle",
  "citizen",
  "city",
  "civil",
  "claim",
  "clap",
  "clarify",
  "claw",
  "clay",
  "clean",
  "clerk",
  "clever",
  "click",
  "client",
  "cliff",
  "climb",
  "clinic",
  "clip",
  "clock",
  "clog",
  "close",
  "cloth",
  "cloud",
  "clown",
  "club",
  "clump",
  "cluster",
  "clutch",
  "coach",
  "coast",
  "coconut",
  "code",
  "coffee",
  "coil",
  "coin",
  "collect",
  "color",
  "column",
  "combine",
  "come",
  "comfort",
  "comic",
  "common",
  "company",
  "concert",
  "conduct",
  "confirm",
  "congress",
  "connect",
  "consider",
  "control",
  "convince",
  "cook",
  "cool",
  "copper",
  "copy",
  "coral",
  "core",
  "corn",
  "correct",
  "cost",
  "cotton",
  "couch",
  "country",
  "couple",
  "course",
  "cousin",
  "cover",
  "coyote",
  "crack",
  "cradle",
  "craft",
  "cram",
  "crane",
  "crash",
  "crater",
  "crawl",
  "crazy",
  "cream",
  "credit",
  "creek",
  "crew",
  "cricket",
  "crime",
  "crisp",
  "critic",
  "crop",
  "cross",
  "crouch",
  "crowd",
  "crucial",
  "cruel",
  "cruise",
  "crumble",
  "crunch",
  "crush",
  "cry",
  "crystal",
  "cube",
  "culture",
  "cup",
  "cupboard",
  "curious",
  "current",
  "curtain",
  "curve",
  "cushion",
  "custom",
  "cute",
  "cycle",
  "dad",
  "damage",
  "damp",
  "dance",
  "danger",
  "daring",
  "dash",
  "daughter",
  "dawn",
  "day",
  "deal",
  "debate",
  "debris",
  "decade",
  "december",
  "decide",
  "decline",
  "decorate",
  "decrease",
  "deer",
  "defense",
  "define",
  "defy",
  "degree",
  "delay",
  "deliver",
  "demand",
  "demise",
  "denial",
  "dentist",
  "deny",
  "depart",
  "depend",
  "deposit",
  "depth",
  "deputy",
  "derive",
  "describe",
  "desert",
  "design",
  "desk",
  "despair",
  "destroy",
  "detail",
  "detect",
  "develop",
  "device",
  "devote",
  "diagram",
  "dial",
  "diamond",
  "diary",
  "dice",
  "diesel",
  "diet",
  "differ",
  "digital",
  "dignity",
  "dilemma",
  "dinner",
  "dinosaur",
  "direct",
  "dirt",
  "disagree",
  "discover",
  "disease",
  "dish",
  "dismiss",
  "disorder",
  "display",
  "distance",
  "divert",
  "divide",
  "divorce",
  "dizzy",
  "doctor",
  "document",
  "dog",
  "doll",
  "dolphin",
  "domain",
  "donate",
  "donkey",
  "donor",
  "door",
  "dose",
  "double",
  "dove",
  "draft",
  "dragon",
  "drama",
  "drastic",
  "draw",
  "dream",
  "dress",
  "drift",
  "drill",
  "drink",
  "drip",
  "drive",
  "drop",
  "drum",
  "dry",
  "duck",
  "dumb",
  "dune",
  "during",
  "dust",
  "dutch",
  "duty",
  "dwarf",
  "dynamic",
  "eager",
  "eagle",
  "early",
  "earn",
  "earth",
  "easily",
  "east",
  "easy",
  "echo",
  "ecology",
  "economy",
  "edge",
  "edit",
  "educate",
  "effort",
  "egg",
  "eight",
  "either",
  "elbow",
  "elder",
  "electric",
  "elegant",
  "element",
  "elephant",
  "elevator",
  "elite",
  "else",
  "embark",
  "embody",
  "embrace",
  "emerge",
  "emotion",
  "employ",
  "empower",
  "empty",
  "enable",
  "enact",
  "end",
  "endless",
  "endorse",
  "enemy",
  "energy",
  "enforce",
  "engage",
  "engine",
  "enhance",
  "enjoy",
  "enlist",
  "enough",
  "enrich",
  "enroll",
  "ensure",
  "enter",
  "entire",
  "entry",
  "envelope",
  "episode",
  "equal",
  "equip",
  "era",
  "erase",
  "erode",
  "erosion",
  "error",
  "erupt",
  "escape",
  "essay",
  "essence",
  "estate",
  "eternal",
  "ethics",
  "evidence",
  "evil",
  "evoke",
  "evolve",
  "exact",
  "example",
  "excess",
  "exchange",
  "excite",
  "exclude",
  "excuse",
  "execute",
  "exercise",
  "exhaust",
  "exhibit",
  "exile",
  "exist",
  "exit",
  "exotic",
  "expand",
  "expect",
  "expire",
  "explain",
  "expose",
  "express",
  "extend",
  "extra",
  "eye",
  "eyebrow",
  "fabric",
  "face",
  "faculty",
  "fade",
  "faint",
  "faith",
  "fall",
  "false",
  "fame",
  "family",
  "famous",
  "fan",
  "fancy",
  "fantasy",
  "farm",
  "fashion",
  "fat",
  "fatal",
  "father",
  "fatigue",
  "fault",
  "favorite",
  "feature",
  "february",
  "federal",
  "fee",
  "feed",
  "feel",
  "female",
  "fence",
  "festival",
  "fetch",
  "fever",
  "few",
  "fiber",
  "fiction",
  "field",
  "figure",
  "file",
  "film",
  "filter",
  "final",
  "find",
  "fine",
  "finger",
  "finish",
  "fire",
  "firm",
  "first",
  "fiscal",
  "fish",
  "fit",
  "fitness",
  "fix",
  "flag",
  "flame",
  "flash",
  "flat",
  "flavor",
  "flee",
  "flight",
  "flip",
  "float",
  "flock",
  "floor",
  "flower",
  "fluid",
  "flush",
  "fly",
  "foam",
  "focus",
  "fog",
  "foil",
  "fold",
  "follow",
  "food",
  "foot",
  "force",
  "forest",
  "forget",
  "fork",
  "fortune",
  "forum",
  "forward",
  "fossil",
  "foster",
  "found",
  "fox",
  "fragile",
  "frame",
  "frequent",
  "fresh",
  "friend",
  "fringe",
  "frog",
  "front",
  "frost",
  "frown",
  "frozen",
  "fruit",
  "fuel",
  "fun",
  "funny",
  "furnace",
  "fury",
  "future",
  "gadget",
  "gain",
  "galaxy",
  "gallery",
  "game",
  "gap",
  "garage",
  "garbage",
  "garden",
  "garlic",
  "garment",
  "gas",
  "gasp",
  "gate",
  "gather",
  "gauge",
  "gaze",
  "general",
  "genius",
  "genre",
  "gentle",
  "genuine",
  "gesture",
  "ghost",
  "giant",
  "gift",
  "giggle",
  "ginger",
  "giraffe",
  "girl",
  "give",
  "glad",
  "glance",
  "glare",
  "glass",
  "glide",
  "glimpse",
  "globe",
  "gloom",
  "glory",
  "glove",
  "glow",
  "glue",
  "goat",
  "goddess",
  "gold",
  "good",
  "goose",
  "gorilla",
  "gospel",
  "gossip",
  "govern",
  "gown",
  "grab",
  "grace",
  "grain",
  "grant",
  "grape",
  "grass",
  "gravity",
  "great",
  "green",
  "grid",
  "grief",
  "grit",
  "grocery",
  "group",
  "grow",
  "grunt",
  "guard",
  "guess",
  "guide",
  "guilt",
  "guitar",
  "gun",
  "gym",
  "habit",
  "hair",
  "half",
  "hammer",
  "hamster",
  "hand",
  "happy",
  "harbor",
  "hard",
  "harsh",
  "harvest",
  "hat",
  "have",
  "hawk",
  "hazard",
  "head",
  "health",
  "heart",
  "heavy",
  "hedgehog",
  "height",
  "hello",
  "helmet",
  "help",
  "hen",
  "hero",
  "hidden",
  "high",
  "hill",
  "hint",
  "hip",
  "hire",
  "history",
  "hobby",
  "hockey",
  "hold",
  "hole",
  "holiday",
  "hollow",
  "home",
  "honey",
  "hood",
  "hope",
  "horn",
  "horror",
  "horse",
  "hospital",
  "host",
  "hotel",
  "hour",
  "hover",
  "hub",
  "huge",
  "human",
  "humble",
  "humor",
  "hundred",
  "hungry",
  "hunt",
  "hurdle",
  "hurry",
  "hurt",
  "husband",
  "hybrid",
  "ice",
  "icon",
  "idea",
  "identify",
  "idle",
  "ignore",
  "ill",
  "illegal",
  "illness",
  "image",
  "imitate",
  "immense",
  "immune",
  "impact",
  "impose",
  "improve",
  "impulse",
  "inch",
  "include",
  "income",
  "increase",
  "index",
  "indicate",
  "indoor",
  "industry",
  "infant",
  "inflict",
  "inform",
  "inhale",
  "inherit",
  "initial",
  "inject",
  "injury",
  "inmate",
  "inner",
  "innocent",
  "input",
  "inquiry",
  "insane",
  "insect",
  "inside",
  "inspire",
  "install",
  "intact",
  "interest",
  "into",
  "invest",
  "invite",
  "involve",
  "iron",
  "island",
  "isolate",
  "issue",
  "item",
  "ivory",
  "jacket",
  "jaguar",
  "jar",
  "jazz",
  "jealous",
  "jeans",
  "jelly",
  "jewel",
  "job",
  "join",
  "joke",
  "journey",
  "joy",
  "judge",
  "juice",
  "jump",
  "jungle",
  "junior",
  "junk",
  "just",
  "kangaroo",
  "keen",
  "keep",
  "ketchup",
  "key",
  "kick",
  "kid",
  "kidney",
  "kind",
  "kingdom",
  "kiss",
  "kit",
  "kitchen",
  "kite",
  "kitten",
  "kiwi",
  "knee",
  "knife",
  "knock",
  "know",
  "lab",
  "label",
  "labor",
  "ladder",
  "lady",
  "lake",
  "lamp",
  "language",
  "laptop",
  "large",
  "later",
  "latin",
  "laugh",
  "laundry",
  "lava",
  "law",
  "lawn",
  "lawsuit",
  "layer",
  "lazy",
  "leader",
  "leaf",
  "learn",
  "leave",
  "lecture",
  "left",
  "leg",
  "legal",
  "legend",
  "leisure",
  "lemon",
  "lend",
  "length",
  "lens",
  "leopard",
  "lesson",
  "letter",
  "level",
  "liar",
  "liberty",
  "library",
  "license",
  "life",
  "lift",
  "light",
  "like",
  "limb",
  "limit",
  "link",
  "lion",
  "liquid",
  "list",
  "little",
  "live",
  "lizard",
  "load",
  "loan",
  "lobster",
  "local",
  "lock",
  "logic",
  "lonely",
  "long",
  "loop",
  "lottery",
  "loud",
  "lounge",
  "love",
  "loyal",
  "lucky",
  "luggage",
  "lumber",
  "lunar",
  "lunch",
  "luxury",
  "lyrics",
  "machine",
  "mad",
  "magic",
  "magnet",
  "maid",
  "mail",
  "main",
  "major",
  "make",
  "mammal",
  "man",
  "manage",
  "mandate",
  "mango",
  "mansion",
  "manual",
  "maple",
  "marble",
  "march",
  "margin",
  "marine",
  "market",
  "marriage",
  "mask",
  "mass",
  "master",
  "match",
  "material",
  "math",
  "matrix",
  "matter",
  "maximum",
  "maze",
  "meadow",
  "mean",
  "measure",
  "meat",
  "mechanic",
  "medal",
  "media",
  "melody",
  "melt",
  "member",
  "memory",
  "mention",
  "menu",
  "mercy",
  "merge",
  "merit",
  "merry",
  "mesh",
  "message",
  "metal",
  "method",
  "middle",
  "midnight",
  "milk",
  "million",
  "mimic",
  "mind",
  "minimum",
  "minor",
  "minute",
  "miracle",
  "mirror",
  "misery",
  "miss",
  "mistake",
  "mix",
  "mixed",
  "mixture",
  "mobile",
  "model",
  "modify",
  "mom",
  "moment",
  "monitor",
  "monkey",
  "monster",
  "month",
  "moon",
  "moral",
  "more",
  "morning",
  "mosquito",
  "mother",
  "motion",
  "motor",
  "mountain",
  "mouse",
  "move",
  "movie",
  "much",
  "muffin",
  "mule",
  "multiply",
  "muscle",
  "museum",
  "mushroom",
  "music",
  "must",
  "mutual",
  "myself",
  "mystery",
  "myth",
  "naive",
  "name",
  "napkin",
  "narrow",
  "nasty",
  "nation",
  "nature",
  "near",
  "neck",
  "need",
  "negative",
  "neglect",
  "neither",
  "nephew",
  "nerve",
  "nest",
  "net",
  "network",
  "neutral",
  "never",
  "news",
  "next",
  "nice",
  "night",
  "noble",
  "noise",
  "nominee",
  "noodle",
  "normal",
  "north",
  "nose",
  "notable",
  "note",
  "nothing",
  "notice",
  "novel",
  "now",
  "nuclear",
  "number",
  "nurse",
  "nut",
  "oak",
  "obey",
  "object",
  "oblige",
  "obscure",
  "observe",
  "obtain",
  "obvious",
  "occur",
  "ocean",
  "october",
  "odor",
  "off",
  "offer",
  "office",
  "often",
  "oil",
  "okay",
  "old",
  "olive",
  "olympic",
  "omit",
  "once",
  "one",
  "onion",
  "online",
  "only",
  "open",
  "opera",
  "opinion",
  "oppose",
  "option",
  "orange",
  "orbit",
  "orchard",
  "order",
  "ordinary",
  "organ",
  "orient",
  "original",
  "orphan",
  "ostrich",
  "other",
  "outdoor",
  "outer",
  "output",
  "outside",
  "oval",
  "oven",
  "over",
  "own",
  "owner",
  "oxygen",
  "oyster",
  "ozone",
  "pact",
  "paddle",
  "page",
  "pair",
  "palace",
  "palm",
  "panda",
  "panel",
  "panic",
  "panther",
  "paper",
  "parade",
  "parent",
  "park",
  "parrot",
  "party",
  "pass",
  "patch",
  "path",
  "patient",
  "patrol",
  "pattern",
  "pause",
  "pave",
  "payment",
  "peace",
  "peanut",
  "pear",
  "peasant",
  "pelican",
  "pen",
  "penalty",
  "pencil",
  "people",
  "pepper",
  "perfect",
  "permit",
  "person",
  "pet",
  "phone",
  "photo",
  "phrase",
  "physical",
  "piano",
  "picnic",
  "picture",
  "piece",
  "pig",
  "pigeon",
  "pill",
  "pilot",
  "pink",
  "pioneer",
  "pipe",
  "pistol",
  "pitch",
  "pizza",
  "place",
  "planet",
  "plastic",
  "plate",
  "play",
  "please",
  "pledge",
  "pluck",
  "plug",
  "plunge",
  "poem",
  "poet",
  "point",
  "polar",
  "pole",
  "police",
  "pond",
  "pony",
  "pool",
  "popular",
  "portion",
  "position",
  "possible",
  "post",
  "potato",
  "pottery",
  "poverty",
  "powder",
  "power",
  "practice",
  "praise",
  "predict",
  "prefer",
  "prepare",
  "present",
  "pretty",
  "prevent",
  "price",
  "pride",
  "primary",
  "print",
  "priority",
  "prison",
  "private",
  "prize",
  "problem",
  "process",
  "produce",
  "profit",
  "program",
  "project",
  "promote",
  "proof",
  "property",
  "prosper",
  "protect",
  "proud",
  "provide",
  "public",
  "pudding",
  "pull",
  "pulp",
  "pulse",
  "pumpkin",
  "punch",
  "pupil",
  "puppy",
  "purchase",
  "purity",
  "purpose",
  "purse",
  "push",
  "put",
  "puzzle",
  "pyramid",
  "quality",
  "quantum",
  "quarter",
  "question",
  "quick",
  "quit",
  "quiz",
  "quote",
  "rabbit",
  "raccoon",
  "race",
  "rack",
  "radar",
  "radio",
  "rail",
  "rain",
  "raise",
  "rally",
  "ramp",
  "ranch",
  "random",
  "range",
  "rapid",
  "rare",
  "rate",
  "rather",
  "raven",
  "raw",
  "razor",
  "ready",
  "real",
  "reason",
  "rebel",
  "rebuild",
  "recall",
  "receive",
  "recipe",
  "record",
  "recycle",
  "reduce",
  "reflect",
  "reform",
  "refuse",
  "region",
  "regret",
  "regular",
  "reject",
  "relax",
  "release",
  "relief",
  "rely",
  "remain",
  "remember",
  "remind",
  "remove",
  "render",
  "renew",
  "rent",
  "reopen",
  "repair",
  "repeat",
  "replace",
  "report",
  "require",
  "rescue",
  "resemble",
  "resist",
  "resource",
  "response",
  "result",
  "retire",
  "retreat",
  "return",
  "reunion",
  "reveal",
  "review",
  "reward",
  "rhythm",
  "rib",
  "ribbon",
  "rice",
  "rich",
  "ride",
  "ridge",
  "rifle",
  "right",
  "rigid",
  "ring",
  "riot",
  "ripple",
  "risk",
  "ritual",
  "rival",
  "river",
  "road",
  "roast",
  "robot",
  "robust",
  "rocket",
  "romance",
  "roof",
  "rookie",
  "room",
  "rose",
  "rotate",
  "rough",
  "round",
  "route",
  "royal",
  "rubber",
  "rude",
  "rug",
  "rule",
  "run",
  "runway",
  "rural",
  "sad",
  "saddle",
  "sadness",
  "safe",
  "sail",
  "salad",
  "salmon",
  "salon",
  "salt",
  "salute",
  "same",
  "sample",
  "sand",
  "satisfy",
  "satoshi",
  "sauce",
  "sausage",
  "save",
  "say",
  "scale",
  "scan",
  "scare",
  "scatter",
  "scene",
  "scheme",
  "school",
  "science",
  "scissors",
  "scorpion",
  "scout",
  "scrap",
  "screen",
  "script",
  "scrub",
  "sea",
  "search",
  "season",
  "seat",
  "second",
  "secret",
  "section",
  "security",
  "seed",
  "seek",
  "segment",
  "select",
  "sell",
  "seminar",
  "senior",
  "sense",
  "sentence",
  "series",
  "service",
  "session",
  "settle",
  "setup",
  "seven",
  "shadow",
  "shaft",
  "shallow",
  "share",
  "shed",
  "shell",
  "sheriff",
  "shield",
  "shift",
  "shine",
  "ship",
  "shiver",
  "shock",
  "shoe",
  "shoot",
  "shop",
  "short",
  "shoulder",
  "shove",
  "shrimp",
  "shrug",
  "shuffle",
  "shy",
  "sibling",
  "sick",
  "side",
  "siege",
  "sight",
  "sign",
  "silent",
  "silk",
  "silly",
  "silver",
  "similar",
  "simple",
  "since",
  "sing",
  "siren",
  "sister",
  "situate",
  "six",
  "size",
  "skate",
  "sketch",
  "ski",
  "skill",
  "skin",
  "skirt",
  "skull",
  "slab",
  "slam",
  "sleep",
  "slender",
  "slice",
  "slide",
  "slight",
  "slim",
  "slogan",
  "slot",
  "slow",
  "slush",
  "small",
  "smart",
  "smile",
  "smoke",
  "smooth",
  "snack",
  "snake",
  "snap",
  "sniff",
  "snow",
  "soap",
  "soccer",
  "social",
  "sock",
  "soda",
  "soft",
  "solar",
  "soldier",
  "solid",
  "solution",
  "solve",
  "someone",
  "song",
  "soon",
  "sorry",
  "sort",
  "soul",
  "sound",
  "soup",
  "source",
  "south",
  "space",
  "spare",
  "spatial",
  "spawn",
  "speak",
  "special",
  "speed",
  "spell",
  "spend",
  "sphere",
  "spice",
  "spider",
  "spike",
  "spin",
  "spirit",
  "split",
  "spoil",
  "sponsor",
  "spoon",
  "sport",
  "spot",
  "spray",
  "spread",
  "spring",
  "spy",
  "square",
  "squeeze",
  "squirrel",
  "stable",
  "stadium",
  "staff",
  "stage",
  "stairs",
  "stamp",
  "stand",
  "start",
  "state",
  "stay",
  "steak",
  "steel",
  "stem",
  "step",
  "stereo",
  "stick",
  "still",
  "sting",
  "stock",
  "stomach",
  "stone",
  "stool",
  "story",
  "stove",
  "strategy",
  "street",
  "strike",
  "strong",
  "struggle",
  "student",
  "stuff",
  "stumble",
  "style",
  "subject",
  "submit",
  "subway",
  "success",
  "such",
  "sudden",
  "suffer",
  "sugar",
  "suggest",
  "suit",
  "summer",
  "sun",
  "sunny",
  "sunset",
  "super",
  "supply",
  "supreme",
  "sure",
  "surface",
  "surge",
  "surprise",
  "surround",
  "survey",
  "suspect",
  "sustain",
  "swallow",
  "swamp",
  "swap",
  "swarm",
  "swear",
  "sweet",
  "swift",
  "swim",
  "swing",
  "switch",
  "sword",
  "symbol",
  "symptom",
  "syrup",
  "system",
  "table",
  "tackle",
  "tag",
  "tail",
  "talent",
  "talk",
  "tank",
  "tape",
  "target",
  "task",
  "taste",
  "tattoo",
  "taxi",
  "teach",
  "team",
  "tell",
  "ten",
  "tenant",
  "tennis",
  "tent",
  "term",
  "test",
  "text",
  "thank",
  "that",
  "theme",
  "then",
  "theory",
  "there",
  "they",
  "thing",
  "this",
  "thought",
  "three",
  "thrive",
  "throw",
  "thumb",
  "thunder",
  "ticket",
  "tide",
  "tiger",
  "tilt",
  "timber",
  "time",
  "tiny",
  "tip",
  "tired",
  "tissue",
  "title",
  "toast",
  "tobacco",
  "today",
  "toddler",
  "toe",
  "together",
  "toilet",
  "token",
  "tomato",
  "tomorrow",
  "tone",
  "tongue",
  "tonight",
  "tool",
  "tooth",
  "top",
  "topic",
  "topple",
  "torch",
  "tornado",
  "tortoise",
  "toss",
  "total",
  "tourist",
  "toward",
  "tower",
  "town",
  "toy",
  "track",
  "trade",
  "traffic",
  "tragic",
  "train",
  "transfer",
  "trap",
  "trash",
  "travel",
  "tray",
  "treat",
  "tree",
  "trend",
  "trial",
  "tribe",
  "trick",
  "trigger",
  "trim",
  "trip",
  "trophy",
  "trouble",
  "truck",
  "true",
  "truly",
  "trumpet",
  "trust",
  "truth",
  "try",
  "tube",
  "tuition",
  "tumble",
  "tuna",
  "tunnel",
  "turkey",
  "turn",
  "turtle",
  "twelve",
  "twenty",
  "twice",
  "twin",
  "twist",
  "two",
  "type",
  "typical",
  "ugly",
  "umbrella",
  "unable",
  "unaware",
  "uncle",
  "uncover",
  "under",
  "undo",
  "unfair",
  "unfold",
  "unhappy",
  "uniform",
  "unique",
  "unit",
  "universe",
  "unknown",
  "unlock",
  "until",
  "unusual",
  "unveil",
  "update",
  "upgrade",
  "uphold",
  "upon",
  "upper",
  "upset",
  "urban",
  "urge",
  "usage",
  "use",
  "used",
  "useful",
  "useless",
  "usual",
  "utility",
  "vacant",
  "vacuum",
  "vague",
  "valid",
  "valley",
  "valve",
  "van",
  "vanish",
  "vapor",
  "various",
  "vast",
  "vault",
  "vehicle",
  "velvet",
  "vendor",
  "venture",
  "venue",
  "verb",
  "verify",
  "version",
  "very",
  "vessel",
  "veteran",
  "viable",
  "vibrant",
  "vicious",
  "victory",
  "video",
  "view",
  "village",
  "vintage",
  "violin",
  "virtual",
  "virus",
  "visa",
  "visit",
  "visual",
  "vital",
  "vivid",
  "vocal",
  "voice",
  "void",
  "volcano",
  "volume",
  "vote",
  "voyage",
  "wage",
  "wagon",
  "wait",
  "walk",
  "wall",
  "walnut",
  "want",
  "warfare",
  "warm",
  "warrior",
  "wash",
  "wasp",
  "waste",
  "water",
  "wave",
  "way",
  "wealth",
  "weapon",
  "wear",
  "weasel",
  "weather",
  "web",
  "wedding",
  "weekend",
  "weird",
  "welcome",
  "west",
  "wet",
  "whale",
  "what",
  "wheat",
  "wheel",
  "when",
  "where",
  "whip",
  "whisper",
  "wide",
  "width",
  "wife",
  "wild",
  "will",
  "win",
  "window",
  "wine",
  "wing",
  "wink",
  "winner",
  "winter",
  "wire",
  "wisdom",
  "wise",
  "wish",
  "witness",
  "wolf",
  "woman",
  "wonder",
  "wood",
  "wool",
  "word",
  "work",
  "world",
  "worry",
  "worth",
  "wrap",
  "wreck",
  "wrestle",
  "wrist",
  "write",
  "wrong",
  "yard",
  "year",
  "yellow",
  "you",
  "young",
  "youth",
  "zebra",
  "zero",
  "zone",
  "zoo",
];
var mnemonic_words_default = words;

// node_modules/antelope-ecc/internal/random_bytes.js
async function random_bytes(bytes = 32) {
  if (typeof window == "undefined") {
    let crypto2;
    try {
      crypto2 = require("crypto");
    } catch (_err) {
      crypto2 = await import("crypto");
    }
    return Uint8Array.from([...crypto2.randomBytes(bytes)]);
  } else return window.crypto.getRandomValues(new Uint8Array(bytes));
}

// node_modules/antelope-ecc/mnemonic_create.js
async function createMnemonic(bytes) {
  if (!bytes) bytes = await random_bytes(32);
  let bitLen = 8 * bytes.length;
  let sumBitLen = bitLen / 32;
  bytes = new Uint8Array(bytes);
  let hashAb = await sha256(bytes);
  let hashBuf = new Uint8Array(hashAb);
  let bits = "";
  bytes.forEach((n) => {
    let b = n.toString(2).padStart(8, "0");
    bits += b;
  });
  let checkByte = hashBuf[0];
  let checkBits = checkByte.toString(2);
  checkBits = checkBits.padStart(8, "0");
  let checksum = checkBits.slice(0, sumBitLen);
  bits += checksum;
  const seed = [];
  for (let bit = 0; bit < bitLen + sumBitLen; bit += 11) {
    let i = parseInt(bits.slice(bit, bit + 11).padStart(8, "0"), 2);
    seed.push(i);
  }
  return seed.map((i) => mnemonic_words_default[i]).join(" ");
}

// node_modules/antelope-ecc/mnemonic_recover.js
async function recoverMnemonic(recoveryPhrase) {
  recoveryPhrase = recoveryPhrase.normalize("NFKD").trim().toLowerCase();
  const ints = [];
  recoveryPhrase.split(/[\s,:-]+/gmu).forEach((word) => {
    let index = mnemonic_words_default.indexOf(word);
    if (index < 0) throw new Error(`unknown word: '${word}'`);
    ints.push(index);
  });
  let digits = ints.map((n) => n.toString(2).padStart(11, "0")).join("");
  let sumBitLen = Math.floor(digits.length / 32);
  let bitLen = digits.length - sumBitLen;
  let bytesArr = [];
  for (let bit = 0; bit < bitLen; bit += 8) {
    let bytestring = digits.slice(bit, bit + 8);
    let n = parseInt(bytestring, 2);
    if (n >= 0) {
      bytesArr.push(n);
    }
  }
  let entropyBytes = Uint8Array.from(bytesArr);
  return entropyBytes;
}

// node_modules/antelope-ecc/new_keys.js
async function new_keys(seed) {
  const private_key = seed ? seed : await random_bytes();
  const { default: get_public_key2 } = await Promise.resolve().then(
    () => (init_get_public_key(), get_public_key_exports)
  );
  const public_key = await get_public_key2(private_key);
  return {
    public_key: await public_key_to_wif(public_key),
    private_key: await private_key_to_wif(private_key),
  };
}

// node_modules/isomorphic-secp256k1-js/recover_public_key.js
init_utils();
init_utils();
async function recover_public_key({ hash, signature }) {
  const { n, mod, x, y } = secp256k1;
  const { s, r, v } = signature;
  const i = BigInt(v);
  if (i > 3n) throw new Error("Invalid value for v.");
  const x_num = i >> 1n ? array_to_number(r) + n : array_to_number(r);
  const R = point_from_x(i & 3n, x_num);
  const e = array_to_number(hash);
  const eneg = get_mod(e * -1n, n);
  const rInv = mul_inverse(array_to_number(r), n);
  const p1 = double_and_add(R, array_to_number(s), mod, n);
  const p2 = double_and_add({ x, y }, eneg, mod, n);
  const p3 = add(p1, p2, mod);
  const P = double_and_add(p3, rInv, mod, n);
  return Uint8Array.from([P.y % 2n ? 3 : 2, ...number_to_array(P.x)]);
}
var recover_public_key_default = recover_public_key;

// node_modules/antelope-ecc/recover_public_key.js
async function recover_public_key2({ signature, hash }) {
  let hash_array;
  if (typeof hash === "string") {
    const hashMatches = hash.match(/[a-fA-F0-9]{2}/gmu);
    if (hashMatches) {
      hash_array = Uint8Array.from(hashMatches.map((i) => Number(`0x${i}`)));
    } else {
      throw new Error("Invalid hash format.");
    }
  } else if (hash instanceof Uint8Array) {
    hash_array = hash;
  } else {
    throw new Error("Hash must be a string or a Uint8Array.");
  }
  if (!signature?.startsWith("SIG_K1_"))
    throw new TypeError("Signature must start with \u201CSIG_K1_\u201D");
  const raw_sig = base58_to_binary_default(
    signature.replace("SIG_K1_", "")
  ).slice(0, -4);
  const v = raw_sig.slice(0, 1)[0] - 31;
  const r = raw_sig.slice(1, 33);
  const s = raw_sig.slice(33, 65);
  return public_key_to_wif(
    await recover_public_key_default({
      hash: hash_array,
      signature: { r, s, v },
    })
  );
}

// node_modules/isomorphic-secp256k1-js/sign.js
init_hmac_sha256();
init_utils();
init_utils();
async function sign({ private_key, hash, canonical = true }) {
  async function deterministically_generate_k(hash2, private_key2, nonce = 0) {
    const msg_digest = nonce
      ? await sha256(Uint8Array.from([...hash2, ...new Uint8Array(nonce)]))
      : hash2;
    const v = new Uint8Array(32).fill(1);
    const k = new Uint8Array(32).fill(0);
    const buff_D = await hmac_sha256_default(
      Uint8Array.from([...v, 0, ...private_key2, ...msg_digest]),
      k
    );
    const buf_E = await hmac_sha256_default(v, buff_D);
    const buf_F = await hmac_sha256_default(
      Uint8Array.from([...buf_E, 1, ...private_key2, ...msg_digest]),
      buff_D
    );
    const buf_G = await hmac_sha256_default(buf_E, buf_F);
    const buf_h2b = await hmac_sha256_default(buf_G, buf_F);
    const T = array_to_number(buf_h2b);
    const e = array_to_number(hash2);
    const d = array_to_number(private_key2);
    const { r, s, racid } = await get_signature(T, e, d, {
      buf_h2b,
      buf_F,
      canonical,
    });
    if (r[0] >= 0x80n || s[0] >= 0x80n)
      return deterministically_generate_k(hash2, private_key2, ++nonce);
    else return { r, s, v: Number(racid) };
  }
  return deterministically_generate_k(hash, private_key);
}
var sign_default = sign;

// node_modules/antelope-ecc/sign.js
async function sign2({ hash, wif_private_key }) {
  const private_key = private_key_from_wif(wif_private_key);
  let hash_array;
  if (typeof hash === "string") {
    const hashMatches = hash.match(/[a-fA-F0-9]{2}/gmu);
    if (hashMatches)
      hash_array = Uint8Array.from(hashMatches.map((i2) => Number(`0x${i2}`)));
    else throw new Error("Invalid hash format.");
  } else if (hash instanceof Uint8Array) hash_array = hash;
  else throw new Error("Hash must be a string or a Uint8Array.");
  const { r, s, v } = await sign_default({ hash: hash_array, private_key });
  const i = 31 + Number(v);
  const K1 = [75, 49];
  const raw_sig = [i, ...r, ...s];
  const ripe_hash = await ripemd160(Uint8Array.from([...raw_sig, ...K1]));
  const checksum = ripe_hash.slice(0, 4);
  const base58_sig = binary_to_base58_default(
    Uint8Array.from([...raw_sig, ...checksum])
  );
  return "SIG_K1_" + base58_sig;
}

// node_modules/antelope-ecc/sign_packed_txn.js
async function sign_packed_txn({
  chain_id,
  transaction_header,
  transaction_body,
  wif_private_key,
  extension = "0000000000000000000000000000000000000000000000000000000000000000",
}) {
  const inputString =
    chain_id + transaction_header + transaction_body + extension;
  const hashArray = inputString.match(/[a-fA-F0-9]{2}/gmu);
  if (!hashArray)
    throw new Error("Invalid input string, could not generate hash.");
  return sign2({
    hash: await sha256(Uint8Array.from(hashArray.map((i) => Number(`0x${i}`)))),
    wif_private_key,
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 &&
  (module.exports = {
    legacy_from_private_key,
    legacy_from_public_key,
    legacy_to_private_key,
    legacy_to_public_key,
    mnemonic_create,
    mnemonic_recover,
    new_keys,
    private_key_from_wif,
    private_key_to_wif,
    public_key_from_private_wif,
    public_key_from_wif,
    public_key_to_wif,
    recover_public_key,
    sign2,
    sign_packed_txn,
    validate_private_key,
    validate_public_key,
  });
